{"version":3,"sources":["Components/OutsideAlerter.js","Components/ContextMenu.js","App.js","serviceWorker.js","index.js"],"names":["OutsideAlerter","onOutsideClick","children","wrapperRef","useRef","handleClickOutside","event","current","contains","target","useEffect","document","addEventListener","removeEventListener","ref","ContextMenuManager","state","contextMenu","contextMenuReference","contextMenuClassName","contextMenuStyle","contextMenuUpdated","changeContextMenu","setState","changeContextMenuPosition","cm","top","left","clientHeight","window","innerHeight","clientWidth","innerWidth","this","props","reference","clearContext","React","Component","childContextTypes","PropTypes","func","ContextMenuWorker","setWrapperRef","node","worker","contextRenderer","preventDefault","stopPropagation","clientX","clientY","context","className","style","contextTypes","ContextMenu","defaultContextMenuStyle","color","background","padding","borderRadius","menu","position","onContextMenu","defaultProps","App","list","remove","index","slice","length","renderMainContextMenu","onClick","renderSubContextMenu","map","listItem","border","closeOnClick","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","Context"],"mappings":"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","file":"static/js/main.e861ab2e.chunk.js","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Component that alerts if you click outside of it\n */\nexport default function OutsideAlerter({onOutsideClick, children}) {\n    const wrapperRef = useRef(null);\n\n    const handleClickOutside = (event) => {\n        if (wrapperRef.current && !wrapperRef.current.contains(event.target)) {\n            onOutsideClick();\n        }\n    };\n    useEffect(() => {\n        document.addEventListener('mousedown', handleClickOutside);\n\n        return () => {\n            document.removeEventListener('mousedown', handleClickOutside);\n        }\n    });\n\n    return (\n        <div ref={wrapperRef}>\n            {children}\n        </div>\n    );\n}\n\nOutsideAlerter.propTypes = {\n    children: PropTypes.element.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport OutsideAlerter from './OutsideAlerter';\n\nexport class ContextMenuManager extends React.Component {\n    static childContextTypes = {\n        changeContextMenu: PropTypes.func,\n    };\n\n    state = {\n        event: null,\n        contextMenu: null,\n        contextMenuReference: null,\n        contextMenuClassName: null,\n        contextMenuStyle: null,\n    };\n\n    contextMenuUpdated = false;\n\n    changeContextMenu = ({event, contextMenu, contextMenuClassName, contextMenuStyle}) => {\n        this.setState({\n            event,\n            contextMenu,\n            contextMenuClassName,\n            contextMenuStyle,\n        });\n    };\n\n    changeContextMenuPosition = () => {\n        if (this.state.event && this.state.contextMenuReference && !this.contextMenuUpdated) {\n            let cm = this.state.contextMenuReference;\n            let {top, left} = this.state.event;\n            if (top + cm.clientHeight > window.innerHeight) {\n                top = top - cm.clientHeight;\n            }\n            if (left + cm.clientWidth > window.innerWidth) {\n                left = window.innerWidth - cm.clientWidth;\n            }\n            let event = {...this.state.event, top, left};\n            this.setState({\n                event,\n            });\n            this.contextMenuUpdated = true;\n        } else if (!this.state.event || !this.state.contextMenuReference) {\n            this.contextMenuUpdated = false;\n        }\n    };\n\n    componentDidUpdate() {\n        this.changeContextMenuPosition();\n    }\n\n    getChildContext() {\n        return {\n            changeContextMenu: this.changeContextMenu,\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                {this.props.children}\n                {\n                    this.state.event &&\n                    <ContextMenu\n                        reference={(cm) => {\n                            this.setState({\n                                contextMenuReference: cm,\n                            });\n                        }}\n                        event={this.state.event}\n                        contextMenu={this.state.contextMenu}\n                        clearContext={() => {\n                            this.changeContextMenu({\n                                event: null,\n                                contextMenu: null,\n                                contextMenuClassName: null,\n                                contextMenuStyle: null,\n                            });\n                        }}\n                        contextMenuStyle={this.state.contextMenuStyle}\n                        contextMenuClassName={this.state.contextMenuClassName}\n                    />\n                }\n            </div>\n        );\n    }\n}\n\nexport class ContextMenuWorker extends React.Component {\n    static contextTypes = {\n        changeContextMenu: PropTypes.func,\n    };\n\n    setWrapperRef = (node) => {\n        this.worker = node;\n    };\n\n    contextRenderer = (event) => {\n        event.preventDefault();\n        event.stopPropagation();\n        let {clientX, clientY} = event;\n        this.context.changeContextMenu({\n            event: {left: clientX, top: clientY},\n            contextMenu: this.props.contextMenu,\n            contextMenuStyle: this.props.contextMenuStyle,\n            contextMenuClassName: this.props.contextMenuClassName,\n        });\n    };\n\n    componentDidMount() {\n        this.worker.addEventListener(\"contextmenu\", this.contextRenderer);\n    }\n\n    componentWillUnmount() {\n        this.worker.removeEventListener(\"contextmenu\", this.contextRenderer);\n    }\n\n    render() {\n        return (\n            <div\n                ref={this.setWrapperRef}\n                className={this.props.className}\n                style={this.props.style}\n            >\n                {this.props.children}\n            </div>\n        );\n    }\n}\n\nexport class ContextMenu extends React.Component {\n    static defaultProps = {\n        contextMenu: \"This is default Context Menu\"\n    };\n\n    defaultContextMenuStyle = {\n        color: \"white\",\n        background: \"black\",\n        top: 0,\n        left: 0,\n        padding: 5,\n        borderRadius: 5,\n    };\n\n    setWrapperRef = (node) => {\n        this.menu = node;\n        this.props.reference(this.menu);\n    };\n\n    // componentDidUpdate() {\n    //     console.log(this.menu.offsetWidth, this.menu.offsetHeight);\n    // }\n\n    render() {\n        let {left, top} = this.props.event;\n        return (\n            <OutsideAlerter onOutsideClick={() => {\n                this.props.clearContext();\n            }}>\n                <div\n                    ref={this.setWrapperRef}\n                    className={this.props.contextMenuClassName}\n                    style={{\n                        ...this.defaultContextMenuStyle, ...this.props.contextMenuStyle,\n                        top,\n                        left,\n                        position: \"absolute\",\n                    }}\n                    onContextMenu={(event) => {\n                        event.preventDefault();\n                    }}\n                >\n                    {this.props.contextMenu}\n                </div>\n            </OutsideAlerter>\n        );\n    }\n}\n\nexport default {\n    ContextMenuManager,\n    ContextMenu,\n    ContextMenuWorker\n}\n","import React from 'react';\nimport './Assets/css/App.css';\n\nimport {ContextMenuManager, ContextMenuWorker} from './Components/ContextMenu';\n\nclass App extends React.Component {\n    state = {\n        list: [\"A\", \"B\", \"C\", \"D\", \"E\"],\n    };\n\n    remove = (index) => {\n        this.setState({\n            list: [\n                ...this.state.list.slice(0, index),\n                ...this.state.list.slice(index + 1, this.state.list.length)\n            ],\n        });\n    };\n\n    renderMainContextMenu = (index) => {\n        const remove = () => {\n            this.remove(index);\n        };\n\n        return (\n            <div>\n                <div onClick={remove}>\n                    Delete\n                </div>\n            </div>\n        );\n    };\n\n    renderSubContextMenu = () => {\n        return (\n            <div>\n                Example Context Menu\n            </div>\n        );\n    };\n\n    render() {\n        return (\n            <ContextMenuManager>\n                {\n                    this.state.list.map((listItem, index) =>\n                        <ContextMenuWorker\n                            contextMenu={this.renderMainContextMenu(index)}\n                            style={{border: \"1px solid red\"}}\n                            closeOnClick\n                        >\n                            {listItem}\n                        </ContextMenuWorker>\n                    )\n                }\n            </ContextMenuManager>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport Context from  './Components/ContextMenu'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport default Context;\n"],"sourceRoot":""}